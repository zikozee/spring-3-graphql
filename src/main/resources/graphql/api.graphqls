#scalar URL
scalar Date
scalar NonNegativeInt
scalar LocalDateTime

union SmartSearchResult = Hello | Book

type Query {
    allHellos: [Hello]
    oneHello: Hello
    books(author: String): [Book]
    booksByReleased(releasedInput: ReleaseHistoryInput!): [Book]
    mobileApps(mobileAppFilter: MobileAppFilter): [MobileApp]
    pets(petFilter: PetFilter): [Pet]
    smartSearch(keyword: String): [SmartSearchResult]
    additionalDataOnRequest: String

    me: User!
    problemLatestList: [Problem!]
    itemSearch(filter: SearchItemFilter): [SearchableItem]
    problemDetail(id: ID!): Problem!
}


type Mutation {
    addHello(helloInput: HelloInput!): Int
    replaceHelloText(helloInput: HelloInput!): [Hello]
#    replaceHelloText(number: Int!, newText: String!): [Hello]
    deleteHello(number: Int!): Int

    userCreate(user: UserCreateInput!): UserResponse!
    userLogin(user: UserLoginInput!): UserResponse!
    userActivation(user: UserActivationInput!): UserActivationResponse!
    problemCreate(problem: ProblemCreateInput!): ProblemResponse!
    solutionCreate(solution: SolutionCreateInput!): SolutionResponse!
    solutionVote(vote: SolutionVoteInput!): SolutionResponse!
}

type Subscription {
    randomStock: Stock

    problemAdded: Problem!
    solutionVoteChanged(solutionId: ID!): Solution!
}